# docs/swagger.yaml
openapi: "3.0.0"
info:
  title: "Express.js API Documentation"
  description: >
    This documentation describes the following endpoints:
    - **Authentication**: /signup, /login, /refresh-token
    - **Task Management**: /tasks (POST, GET), /tasks/{id} (PUT, DELETE)
  version: "1.0.0"
servers:
  - url: "http://localhost:3000"
paths:
  /signup:
    post:
      tags:
        - Authentication
      summary: "User Registration"
      description: "Endpoint for new user registration."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
                username:
                  type: string
                  example: "user123"
            example:
              email: "user@example.com"
              password: "password123"
              username: "user123"
      responses:
        "201":
          description: "Registration successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Registration successful"
        "400":
          description: "User already exists or input error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "User already exists"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Server error"

  /login:
    post:
      tags:
        - Authentication
      summary: "User Login"
      description: "Endpoint for user login."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        "200":
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refreshToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful"
        "400":
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Invalid credentials"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Server error"

  /refresh-token:
    post:
      tags:
        - Authentication
      summary: "Token Refresh"
      description: "Verifies refresh token and issues new access and refresh tokens."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            example:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: "New tokens issued successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "newAccessToken123..."
                      refreshToken:
                        type: string
                        example: "newRefreshToken123..."
                  message:
                    type: string
                    example: "New tokens issued successfully"
        "401":
          description: "Refresh token required"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Refresh token required"
        "403":
          description: "Invalid refresh token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Invalid refresh token"

  /tasks:
    post:
      tags:
        - Task Management
      summary: "Create New Task"
      description: "JWT Authentication required – Endpoint to create new task."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Task"
                description:
                  type: string
                  example: "Task description"
                priority:
                  type: string
                  enum: [Low, Medium, High]
                  example: "Medium"
                status:
                  type: string
                  enum: ["To Do", "In Progress", "Done"]
                  example: "To Do"
                dueDate:
                  type: string
                  format: date-time
                  example: "2025-03-01T00:00:00Z"
                assignedTo:
                  type: string
                  example: "user2"
            example:
              title: "New Task"
              description: "Task description"
              priority: "Medium"
              status: "To Do"
              dueDate: "2025-03-01T00:00:00Z"
              assignedTo: "user2"
      responses:
        "201":
          description: "Task created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Task'
                  message:
                    type: string
                    example: "Task created successfully"
        "400":
          description: "Invalid input or missing field"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Title is required"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Server error"
    get:
      tags:
        - Task Management
      summary: "Retrieve Task List"
      description: "JWT Authentication required – Endpoint to retrieve user's task list."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: priority
          schema:
            type: string
            enum: [Low, Medium, High]
          description: "Filter by priority"
        - in: query
          name: status
          schema:
            type: string
            enum: ["To Do", "In Progress", "Done"]
          description: "Filter by status"
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
          description: "Due date (YYYY-MM-DD)"
        - in: query
          name: perPage
          schema:
            type: number
            example: 10
          description: "Number of tasks per page"
        - in: query
          name: pageNumber
          schema:
            type: number
            example: 1
          description: "Page number to retrieve"
      responses:
        "200":
          description: "Task list retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
                      total:
                        type: number
                        example: 100
                      pageNumber:
                        type: number
                        example: 1
                      perPage:
                        type: number
                        example: 10
                  message:
                    type: string
                    example: ""
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Server error"

  /tasks/{id}:
    put:
      tags:
        - Task Management
      summary: "Update Task"
      description: "JWT Authentication required – Endpoint to update a specific task."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: "ID of the task to update"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Task"
                description:
                  type: string
                  example: "Updated description"
                priority:
                  type: string
                  enum: [Low, Medium, High]
                  example: "High"
                status:
                  type: string
                  enum: ["To Do", "In Progress", "Done"]
                  example: "In Progress"
                dueDate:
                  type: string
                  format: date-time
                  example: "2025-04-01T00:00:00Z"
                assignedTo:
                  type: string
                  example: "user3"
            example:
              title: "Updated Task"
              description: "Updated description"
              priority: "High"
              status: "In Progress"
              dueDate: "2025-04-01T00:00:00Z"
              assignedTo: "user3"
      responses:
        "200":
          description: "Task updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Task'
                  message:
                    type: string
                    example: "Task updated successfully"
        "400":
          description: "Invalid input or inappropriate field"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Invalid priority value"
        "403":
          description: "Authorization error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Not authorized to update this task"
        "404":
          description: "Task not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Task not found"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Server error"
    delete:
      tags:
        - Task Management
      summary: "Delete Task"
      description: "JWT Authentication required – Endpoint to delete a specific task."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: "ID of the task to delete"
      responses:
        "200":
          description: "Task deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Task deleted successfully"
        "403":
          description: "Authorization error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Not authorized to delete this task"
        "404":
          description: "Task not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Task not found"
        "500":
          description: "Server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: "null"
                  message:
                    type: string
                    example: "Server error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: "user123"
        email:
          type: string
          example: "user@example.com"
        role:
          type: string
          example: "user"
    Task:
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: "New Task"
        description:
          type: string
          example: "Task description"
        priority:
          type: string
          enum: [Low, Medium, High]
          example: "Medium"
        status:
          type: string
          enum: ["To Do", "In Progress", "Done"]
          example: "To Do"
        dueDate:
          type: string
          format: date-time
          example: "2025-03-01T00:00:00Z"
        assignedTo:
          type: string
          example: "user2"
        createdAt:
          type: string
          format: date-time
          example: "2025-02-17T09:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-02-17T10:00:00Z"
        createdBy:
          $ref: '#/components/schemas/User'
